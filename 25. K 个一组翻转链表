# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        if k == 0:
            return head
        pre = head
        end = head
        cur = 1
        while(cur < k):
            if end == None:
                break
            end = end.next
            cur = cur+1
        if end != None:
            head_pre = pre
            pre_next = end.next
            p = self.reverseList(pre,end)
            top = self.reverseKGroup(pre_next,k)
            head_pre.next = top
            return p
        else:
            return pre
    
    def reverseList(self,pre: ListNode, end: ListNode):
        p = None
        cur = pre
        q = end.next
        while(cur != q):
            n = cur.next
            cur.next = p
            p = cur
            cur = n
        return p
